from datetime import datetime
from random import choice, randrange

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import rcParams
from nilmtk import DataSet

from datareader import Datareader as dr
from models import DAE_model
import pytz

SAMPLERATE = 6  # TODO: set to 10
WINDOWSIZE = 2  # hours


def generate_syntetic_data(appliances, seq_len):
    # To create a single sequence of synthetic data,
    # we start with two vectors of zeros:
    # one vector will become the input to the net;
    # the other will become the target
    vec_input = np.zeros((len(appliances), seq_len))
    vec_output = np.zeros((len(appliances), seq_len))
    # We go through the 5 appliance
    # classes and decide whether or not to add an activation
    # of that class to the training sequence.
    # There is a 50% chance that the target appliance will appear in the sequence

    for i, appliance in enumerate(appliances):
        r = choice([0, 1])
        if r == 0:
            # print("Appliance " + str(i) + " is chosen")
            selected_on_state = choice(appliance)
            if len(vec_input[i]) - len(selected_on_state) > 0:
                start = randrange(0, len(vec_input[i]) - len(selected_on_state), 1)
                end = start + len(selected_on_state)
                vec_input[i][start:end] = vec_input[i][start:end] + selected_on_state.values
                vec_output[i][start:end] = vec_output[i][start:end] + selected_on_state.values
            else:
                print(str(i) + " DOES NOT FIT")
        # else:
        # print("Appliance " + str(i) + " is NOT chosen")
        # and a 25% chance for each other `distractor' appliance
        for j, disruptor_appliance in enumerate(appliances):
            r = choice([0, 1, 2, 3])
            # print(r)
            if r == 0 and not j == i:
                # print("Appliance " + str(j) + " is chosen as a disruptor")
                selected_on_state = choice(disruptor_appliance)
                start = randrange(0, len(vec_input[i]), 1)
                if start + len(selected_on_state) < len(vec_input[i]):
                    end = start + len(selected_on_state)
                    end_selected_state = len(selected_on_state)
                else:
                    end = len(vec_input[i])
                    end_selected_state = len(vec_input[i]) - start
                vec_input[i][start:end] = vec_input[i][start:end] + selected_on_state.values[:end_selected_state]

    return vec_input, vec_output


# If other activations of the target appliance happen to appear in the
# aggregate data then these are not included in the target
# sequence; the net is trained to focus on the rst complete
# target appliance activation in the aggregate data.
# TODO: now we simply replace the vector with an array, should that be done?
def generate_real_data(appliances, aggregate_consumption, seq_len):
    vec_input = np.zeros((len(appliances), seq_len))
    vec_output = np.zeros((len(appliances), seq_len))
    for i, appliance in enumerate(appliances):
        r = choice([0, 1])
        if r == 0:  # appliance should not be included in the sample
            chosen_range = randrange(1, len(appliance), 1)
            start_date = appliance[chosen_range - 1].index[-1]
            end_date = appliance[chosen_range].index[0]
            end = min(len(aggregate_consumption[start_date:end_date].values), len(vec_input[i]))
        else:  # appliance should be included in the sample
            chosen_range = randrange(0, len(appliance), 1)
            start_date = appliance[chosen_range].index[0]
            end_date = appliance[chosen_range].index[-1]
            end = min(len(aggregate_consumption[start_date:end_date].values), len(vec_input[i]))
            vec_output[i][:end] = vec_output[i][:end] + appliance[chosen_range].values[:end]

        window = aggregate_consumption[start_date:end_date]
        values = window.values.reshape(len(window))
        start = max(0, int(len(vec_input[i]) / 2 - len(window) / 2))
        print(vec_input[i].shape)
        print(values.shape)
        vec_input[i][start:end+start] = vec_input[i][start:end+start] + values[:end]

    return vec_input, vec_output


rcParams['figure.figsize'] = (13, 6)
data = DataSet("../data/redd.5h")

train_start = datetime(2011, 4, 18, 10, tzinfo=pytz.UTC)
train_end = datetime(2011, 5, 18, tzinfo=pytz.UTC)

selected_appliances = ['fridge', 'dish washer', 'microwave', 'washer dryer']
selected_total = ['fridge', 'dish washer', 'microwave', 'washer dryer']
# TODO: add light shiat and modify handcoded
fridge = {"max_power": 300, "on_power_threshold": 50, "min_on": 60, "min_off": 12}
dish_washer = {"max_power": 2500, "on_power_threshold": 10, "min_on": 1800, "min_off": 1800}
# light = {"max_power": None, "on_power_threshold": None, "min_on": None, "min_off": None}
microwave = {"max_power": 3000, "on_power_threshold": 200, "min_on": 12, "min_off": 30}
# electric_space_heater = {"max_power": None, "on_power_threshold": None, "min_on": None, "min_off": None}
washer_dryer = {"max_power": 2500, "on_power_threshold": 20, "min_on": 1800, "min_off": 160}

appliance_parameters = [fridge, dish_washer, microwave, washer_dryer]
train_appliances = dr.load_appliance_activation(data, train_start, train_end, building=1,
                                                selection=selected_appliances,
                                                activation_series_parameters=appliance_parameters,
                                                sample_period=SAMPLERATE)
total_power_consumption = dr.load_total_power_consumption(data.buildings[1].elec, selected_total, sample_period=SAMPLERATE)
# Targets are divided by a hand-coded `maximum power
# demand' for each appliance to put the target power demand
# into the range [0, 1].
# realin, realout = generate_real_data(train_appliances, total_power_consumption)
"""for j in range(0, len(realin)):
    plt.plot(realin[j])
    plt.title("real in: " + str(j))
    plt.show()
    plt.plot(realout[j])
    plt.title("real out: " + str(j))
    plt.show()"""

# synteticin, synteticout = generate_syntetic_data(train_appliances)
"""print(len(synteticin))
for j in range(0, len(synteticin)):
    plt.plot(synteticin[j])
    plt.title("syntetic in: " + str(j))
    plt.show()
    plt.plot(synteticout[j])
    plt.title("syntetic out: " + str(j))
    plt.show()"""

sequenceLength = 512  # according to the book for fridge
# 128 sequenceLength for kettle(min)
# 1536 sequenceLength for the dishwasher(max)
# they used 6 seconds sample rate we use 10
irange = 1000
fridgein = []
fridgeout = []
for i in range(0, irange):
    r = choice([True, False])
    tempin, tempout = generate_syntetic_data(train_appliances, sequenceLength) if r else generate_real_data(
        train_appliances, total_power_consumption, sequenceLength)
    tempin[0] = tempin[0] - tempin[0].mean()
    fridgein.append(tempin[0])
    fridgeout.append(tempout[0])

fridgein = np.array(fridgein).reshape((irange, sequenceLength, 1))
fridgeout = np.array(fridgeout).reshape((irange, sequenceLength, 1))

# reformat input
assert len(fridgein) == len(fridgeout)
for i in range(0, irange):
    # first the mean of each sequence is subtracted from the sequence
    fridgein[i] -= fridgein[i].mean()

# every input sequence is devided by the standard deviation of a random sample of the training set
for i in range(0, irange):
    chosen_index = choice(list(range(0, i)) + list(range(i + 1, irange)))
    standard_dev = fridgein[chosen_index].std()
    #fridgein[i] = fridgein[i] / standard_dev if standard_dev > 0 else fridgein[i]
    # targets are divided by a hand-coded maximum power demand for each appliance to put the target between [0,1]
    fridgeout[i] = (fridgeout[i] / fridge["max_power"])*100

# fridge model
fridge_model = DAE_model(sequenceLength)

fridge_model.fit(fridgein, fridgeout, epochs=100, batch_size=64)
result = fridge_model.predict(fridgein)

for i in range(0, 4):
    """plt.plot(fridgein[i].reshape(sequenceLength))
    plt.title("input")
    plt.axis([0,sequenceLength,0,1])
    plt.show()"""

    plt.plot(result[i].reshape(sequenceLength))
    plt.title("result for " + str(i))
    plt.axis([0, sequenceLength, 0, 1])
    plt.show()

    plt.plot(fridgeout[i].reshape(sequenceLength))
    plt.title("correct output for " + str(i))
    plt.axis([0, sequenceLength, 0, 1])
    plt.show()

# print(classification_report(fridgein[1].reshape(sequenceLength), result.reshape(sequenceLength)))
